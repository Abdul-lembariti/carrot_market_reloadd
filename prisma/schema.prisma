generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  email       String?      @unique
  phone       String?      @unique
  github_id   String?      @unique
  google_id   String?      @unique
  password    String?
  avatar      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  SMSToken    SMSToken[]
  Product     Product[]
  Post        Post[]
  comments    Comment[]
  Like        Like[]
  chats_rooms ChatRoom[]
  messages    Message[]
  LiveStream  LiveStream[]
}

model SMSToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //cant delete the user on Cascade
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Product {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  price       Float
  description String
  photo       String
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  Like     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int
  postId    Int

  @@id(name: "id", [userId, postId])
}

model ChatRoom {
  id    String @id @default(cuid())
  users User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  chatRoomId String
}

model LiveStream {
  id         Int    @id @default(autoincrement())
  title      String
  stream_key String
  stream_id  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int
}
